package minAbsSliceSum;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

//Не пустой ноль-индексированный массив a из N целых чисел дано. Пара целых чисел (Р, Q), таких,
//        что 0 ≤ Р ≤ Г < П, называется срез массива А. сумму среза (Р, Q) является общей, А[П] + А[П+1] + ... + А[Д].
//
//        Мин АБС ломтик ломтик абсолютная сумма которых минимальна. Например, массив a такое, что:
//
//        А[0] = 2, А[1] = -4 А[2] = 6 В[3] = 3 А[4] = 9 содержит следующие фрагменты, в том числе:
//
//        (0, 1), чьи абсолютной суммы = |2 + (-4)| = 2 (0, 2), чья абсолютная сумма = |2 + (-4) + 6| = 4 (0, 3),
//        чья абсолютная сумма = |2 + (-4) + 6 + (-3)| = 1 (1, 3), чья абсолютная сумма = |(-4) + 6 + (-3)| = 1 (1, 4),
//        чья абсолютная сумма = |(-4) + 6 + (-3) + 9| = 8 (4, 4), чья абсолютная сумма = |9| = 9 В обе кусочками (0, 3) и (1, 3) несколько мин АБС срезов и их абсолютная сумма равна 1.
//
//        Написать функцию:
//
//        решение класса { решение общественная int(Тип int[] а); }
//
//        это, учитывая не пустой ноль-индексированный массив a, состоящий из N целых чисел, возвращает абсолютную сумму мин срез АБС.
//
//        Например, дано:
//
//        А[0] = 2, А[1] = -4 А[2] = 6 В[3] = -3 А[4] = 9 функция должна возвращать 1, как описано выше.
//
//        Предположим, что:
//
//        N-целое число в диапазоне [1..100,000]; каждый элемент массива представляет собой целое число в диапазоне [-10,000..10,000]. Сложности:
//
//        ожидается, что в худшем случае временная сложность составляет o(Н*лог(Н));
//        ожидается, что в худшем случае пространство имеет сложность o(n), а за входной хранения (не считая памяти, необходимого для хранения входных аргументов).
//        Элементов входных массивов может быть изменен.
public class Solution {
    public static void main(String[] args) {
        int[] array = {2,-4,6,-3,9};
       Solution solution = new Solution();
        System.out.println(solution.solution(array));

    }
    public int solution(int[] A){
        List<int[]> listOfSlices = new ArrayList<>();

        for(int i = 0; i<A.length; i++){

          for (int j = i+2; j < A.length; j++){
              listOfSlices.add(Arrays.copyOfRange(A,i,j));
          }

        }
        int currentResult = 0;
        for(int[] arr: listOfSlices){

            if(currentResult == 0){
                currentResult = sumOfSlice(arr);
                continue;
            }
            if(currentResult >= sumOfSlice(arr)){
                currentResult = sumOfSlice(arr);
            }

        }
        return currentResult;
    }
    public int sumOfSlice(int[] workArr){
        int result = 0;
        for(int y: workArr){
            result +=y;
        }
        return Math.abs(result);
    }
}
